<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/Resurch_Blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/Resurch_Blog/" rel="alternate" type="text/html" /><updated>2020-07-01T16:14:27-05:00</updated><id>http://localhost:4000/Resurch_Blog/feed.xml</id><title type="html">Ben-Purdy Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">First scripting attempt: state machine</title><link href="http://localhost:4000/Resurch_Blog/jekyll/update/2020/06/30/first-actions.html" rel="alternate" type="text/html" title="First scripting attempt: state machine" /><published>2020-06-30T09:55:51-05:00</published><updated>2020-06-30T09:55:51-05:00</updated><id>http://localhost:4000/Resurch_Blog/jekyll/update/2020/06/30/first-actions</id><content type="html" xml:base="http://localhost:4000/Resurch_Blog/jekyll/update/2020/06/30/first-actions.html">&lt;p&gt;Today I created the first test actions related to the AI system we’ve been developing for ASTERS. The three scripts Flee_danger_state.cs, Random_state.cs, and Find_exit.cs were implemented as a test of the state machine’s ability to change states on command. It was a successful test.&lt;/p&gt;

&lt;p&gt;The second idea I tackle is how to select a point within a 2d plain that lets the agent move towards a goal or target object.
This isn’t as easy but I was able to come up with an idea to locate a point of interest by gathering relevant data to make an informed decision in a very basic way. I will need to expand this out into a more concert implementation but its a starting point.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/Pathimage.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“Things to do” identify the nearby object of interest, be able to turn and move down hallways and create a path within a script that survives multiple calls to start Coroutine()&lt;/p&gt;

&lt;p&gt;Video issues&lt;/p&gt;

&lt;style&gt;
.grid-container {
  display: grid;
  grid-template-columns: 1;

 }
 .grid-item {
 	border: 1px solid rgba(0, 0, 0, 0.8);
 }
 &lt;/style&gt;

&lt;div class=&quot;.grid-container&quot;&gt;
	&lt;div class=&quot;.grid-item&quot;&gt;
		&lt;p&gt;Moving tords exit&lt;/p&gt;
		&lt;video width=&quot;320&quot; height=&quot;240&quot; muted=&quot;&quot; autoplay=&quot;&quot; controls=&quot;&quot;&gt;
	  		&lt;source src=&quot;../assets/videoprogress1_first_scripts.mov&quot; /&gt;
		&lt;/video&gt;

	&lt;/div&gt;
	&lt;div class=&quot;.grid-item&quot;&gt;
		&lt;p&gt;Moving away from shooter&lt;/p&gt;
		&lt;video width=&quot;320&quot; height=&quot;240&quot; preload=&quot;&quot; muted=&quot;&quot; autoplay=&quot;&quot; controls=&quot;&quot;&gt;
	  		&lt;source src=&quot;/assets/videoprogress2_first_scripts.mov&quot; /&gt;
		&lt;/video&gt;

	&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Today I created the first test actions related to the AI system we’ve been developing for ASTERS. The three scripts Flee_danger_state.cs, Random_state.cs, and Find_exit.cs were implemented as a test of the state machine’s ability to change states on command. It was a successful test.</summary></entry><entry><title type="html">Ready to be back</title><link href="http://localhost:4000/Resurch_Blog/jekyll/update/2020/06/25/Ready-to-be-back.html" rel="alternate" type="text/html" title="Ready to be back" /><published>2020-06-25T09:30:13-05:00</published><updated>2020-06-25T09:30:13-05:00</updated><id>http://localhost:4000/Resurch_Blog/jekyll/update/2020/06/25/Ready-to-be-back</id><content type="html" xml:base="http://localhost:4000/Resurch_Blog/jekyll/update/2020/06/25/Ready-to-be-back.html">&lt;h1 id=&quot;hello&quot;&gt;hello,&lt;/h1&gt;

&lt;p&gt;Coming back to everything this week is a lot. I enjoyed colorado, but im ready to tackle it my workload and made some progress. Yesterday I was able to fix the surface level issues with the state machine implementation. I am sure there will be other issues, but I got Megan to move through repeated calls to coroutines.&lt;/p&gt;

&lt;p&gt;Immediately, I haven’t been able to make much progress on the space syntax paragraph with everything happening. Today’s goal is to do some research and get something together for Dr. Gilbert.&lt;/p&gt;</content><author><name></name></author><summary type="html">hello,</summary></entry><entry><title type="html">Space Syntex prosses and base line code</title><link href="http://localhost:4000/Resurch_Blog/jekyll/update/2020/06/11/Meeting.html" rel="alternate" type="text/html" title="Space Syntex prosses and base line code" /><published>2020-06-11T11:04:12-05:00</published><updated>2020-06-11T11:04:12-05:00</updated><id>http://localhost:4000/Resurch_Blog/jekyll/update/2020/06/11/Meeting</id><content type="html" xml:base="http://localhost:4000/Resurch_Blog/jekyll/update/2020/06/11/Meeting.html">&lt;p&gt;Today we had an update meeting and it felt like a productive meeting. Updating Dr. Gilbert while also informing him of the progress we’ve made on the AI agents within the school simulation went well. After our updates were over we had a productive talk about using space syntax and its possible usages relating to this project. Im not completely sure how we’ll be able to classify schools using this tool but ill have to look into it more before I know for certain.&lt;/p&gt;</content><author><name></name></author><summary type="html">Today we had an update meeting and it felt like a productive meeting. Updating Dr. Gilbert while also informing him of the progress we’ve made on the AI agents within the school simulation went well. After our updates were over we had a productive talk about using space syntax and its possible usages relating to this project. Im not completely sure how we’ll be able to classify schools using this tool but ill have to look into it more before I know for certain.</summary></entry><entry><title type="html">everything this is set up!</title><link href="http://localhost:4000/Resurch_Blog/jekyll/update/2020/05/15/DepthMapX.html" rel="alternate" type="text/html" title="everything this is set up!" /><published>2020-05-15T11:04:12-05:00</published><updated>2020-05-15T11:04:12-05:00</updated><id>http://localhost:4000/Resurch_Blog/jekyll/update/2020/05/15/DepthMapX</id><content type="html" xml:base="http://localhost:4000/Resurch_Blog/jekyll/update/2020/05/15/DepthMapX.html">&lt;p&gt;Thank you for the dxf file Jameel. Everything worked with depthmapx as planed and i wa&lt;/p&gt;</content><author><name></name></author><summary type="html">Thank you for the dxf file Jameel. Everything worked with depthmapx as planed and i wa</summary></entry><entry><title type="html">Code Progress!</title><link href="http://localhost:4000/Resurch_Blog/jekyll/update/2020/05/11/post1.html" rel="alternate" type="text/html" title="Code Progress!" /><published>2020-05-11T11:04:12-05:00</published><updated>2020-05-11T11:04:12-05:00</updated><id>http://localhost:4000/Resurch_Blog/jekyll/update/2020/05/11/post1</id><content type="html" xml:base="http://localhost:4000/Resurch_Blog/jekyll/update/2020/05/11/post1.html">&lt;p&gt;Code update 
Unity has been fun. Foundational code is 90% done before the inclusions of state scripts. As long as everything behaves we should be able to create methods check state() and SelectState() to change the state of each agent within the simulation independent. Now creating state scripts will be more tedious but should be able to tweak them until they run in a reasonable way.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Things to do&lt;/li&gt;
  &lt;li&gt;narrow down the core states a civilian and schooter and be in.&lt;/li&gt;
  &lt;li&gt;create a general script layout and inherited&lt;/li&gt;
  &lt;li&gt;create testing inviorment for theses agents&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Code update Unity has been fun. Foundational code is 90% done before the inclusions of state scripts. As long as everything behaves we should be able to create methods check state() and SelectState() to change the state of each agent within the simulation independent. Now creating state scripts will be more tedious but should be able to tweak them until they run in a reasonable way.</summary></entry><entry><title type="html">Jekyll bace message!</title><link href="http://localhost:4000/Resurch_Blog/jekyll/update/2020/03/11/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Jekyll bace message!" /><published>2020-03-11T11:04:12-05:00</published><updated>2020-03-11T11:04:12-05:00</updated><id>http://localhost:4000/Resurch_Blog/jekyll/update/2020/03/11/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/Resurch_Blog/jekyll/update/2020/03/11/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>